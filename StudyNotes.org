* Python
** 计算机科学及编程导论，麻省理工（网易公开课）
*** lesson 1 数据类型、运算、变量
program is a recipe.
Given a fixed set of primitives, a good programmer can program anything.
1936, Alan turing, 6 simple primitives. 
Turing compatibility: anything you can do with one language, you can do with another.
There is no best language.
Our goal is to learn how to how to design "recipes", how to structure "recipes", how to do things in modes in Python. not about the language self.
- 3 dimensions of language
  - High vs Low
  - gerneral vs targeted
  - interpreted vs compiled

Syntax
semantics: /static semantics/ vs /full semantics/

Values: numbers, strings
Operations: + - *

*** lesson 2 分支、条件和循环
note: don't change types arbitrarily. good programming style
Statement = legal commands that python can interpret

good programming style
1) comments
2) choice of variable names, use name that make sense


branch: if, elif, else
iteration/loop: while, for

*** lesson 3 一般代码样式，循环式程序
Data, operators, commands
common patern program
iterative programs
- choose a var, the "count"
- initialize outside the loop
- set up the right and test(variable)
- construct block
  - change the variable
- what to do when done
flow chart, structure the code
Simulate the code
- when terminate
- when it terminate, does it return the right answer
Defensive programming: basic assumption, people are dumb, they make mistakes
exhaustive enumeration: try all reasonable values till you find the solution
tuple: ordered sequence of elements(immutable)
- selection, slicing
*Turing complete* language: with just the set of contructs, anything you can describe algorithmically, you can compute with that set of constructs.

*** lesson 4 函数抽象与递归简介
Decomposition: break up code to modules
Abstraction: let us suppress details, treat the computation as a black box
So add functions
1) break up into modules
2) suppress detail
3) create new "primitive"
Recursion
- base case: simplest possible solution
- inductive/recursive step
  - break the problem into a simpler version of the same problem and some other steps.
palindrome
*** lesson 5 浮点数和二分法（逐次近似）
long integer: > 2 billion
float - floating point
- IEEE 754 floating point
- a variant of scientific notation, in the form of a mantissa and an exponent
- 1 <= mantissa < 2, -1022 to 1023 of exponent
- 64 bit: 1 bit sign, 11 bit exponent, 52 bit for mantissa
- 17 decimal digits least
it's very risky to ever use the built-in double equals to compare floating points
- (math.sqrt(2)) ** 2 == 2? in python, it shows False, cause the result is 2.00...04
- you should never be testing for equality, you should always test for *close enough*
- like: abs(a*a - 2.0) < epsilon
Guess, check and improve
Successive approximate
Bi-section method, logarithmically progressed
*** lesson 6 二分法，牛顿，拉复生方法，数组简介



** Think Python
*** Chapter 6 Fruitful Functions
Ensure that every possible path through the program hits a return statment. if the flow of execution gets to the end of a function, the return value is None.
Incremental development
- to avoid long debugging sessions by adding and testing only a small amount of code at a time
- scaffolding: it's helpful for building the program but is not part of the final product
the key aspect of the process are:
1. start with a working program and make small incremental changes
2. use temporary variable to hold intermediate values
3. once the program is working, you might want to remove some of the scaffolding or consolidate multipe statements into compound expressions, but only if it does not make the program difficult to read
Composition: call one function from within another
Boolean Functions: convenient for hiding complicated tests inside functions
Recursion
complete programming language: anything that can be computed can be expressed in this language
Guardian: protecting the code that follows from values that might cause an error. The guardian make it possible to prove the correctness of the code
Debuging:
- something wrong with the arguments the function is getting,  a precondition is violated.
- something wrong with the function, a postcondition is violated.
- something wrong with the return value or the way it is being used.
It takes some time to develop effective scaffolding, but a little bit of scaffolding can save a lot of debugging.
*** Chapter 7 Iteration
- Multiple Assignment, a new assignment makes an existing variable refer to a new value(and stop referring to the old value)
- update, where the new value of the variable depends on the old.
  - eg: increment: x = x+1
  - before you can update a variable, you have to initialize it.
- Repeating identical or similar tasks without making errors is something that computers do well and people do poorly.
  - use recursion to perform repetition, which is also called iteration.
  - for, while: loop
  - infinite loop
  - break
    - you can check the condition anywhere in the loop(not just at the top) and you can express the stop condition affirmatively rather than negatively
  - Newton's method for computing square roots
    - y = (x + a/x) / 2
- in general it's dangerous to test float equality, floating point values are only approximately right. Cause most rational numbers can't be represent exactly with a float. like 1/3.
  - rather than checking whether x and y are exactly equal, it's safer to use the built-in function abs to compute the absolute value of the difference between them.
  - if abs(y-x) < epsilon: where epsilon has a value that determines how close is close enough.
- Algorithms
  - Mechanical process for solving a category of problems
  - algorithems do not require any intelligence to carry out, on the other hand, the process of designing algorithms is interesting, intellectually challenging, and a central part of what we call programming.
  - some of the things that people do naturally, are the hardest to express algorithmically.
*** Chapter 8 Strings
- string is a sequence of characters
- index
- len
- traversal, in for loop
  - for char in string:
- concatenation: string addition
- string slices
  - a segment of a string is called a slice
  - [n:m]: n-eth to m-eth character, including n-eth, excluding the m-eth
  - [:n], [n:]
  - [n:n] is empty string
- Strings are immutable
  - can't use the [] operator on the left side of an assignment.
  - the best you can do is create a new string that is a variation on the original
- search: opposite of the [] operator
  - pattern of computation: traversing a sequence and returning when we find what we are looking for
- looping and counting
- String Methods
  - a method call is called an invocation
  - upper(), find()
- the 'in' operator
  - the word 'in' is a boolean operator that takes two strings and returns True if the first appears as a substring in the second.
- Strings comparison
  - ==, <, >(alphabetical order)
  - all the uppercase letters come before all the lowercase letters

* AI
** 莫愁Python 机器学习 系列视频
机器学习类型
1) 监督学习
2) 半监督学期
3) 无监督学习
4) 强化学习
5) 遗传算法

